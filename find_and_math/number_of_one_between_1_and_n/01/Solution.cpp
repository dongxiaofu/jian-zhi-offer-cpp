//
// Created by chugang on 2020/5/30.
//
/******************************************************************
 * 整数中1出现的次数（从1到n整数中1出现的次数），时间复杂度O(N2)。
 * 思路：
 * 1.求正整数N中1出现的次数。
 * 1>依次将非个位数字移动到个位，然后对10取模。取模结果
 * 是1，计算器加1。
 * 2>移动方法：多次执行N/10。第一次执行，把十位数字移动到个位；第二次执行，把
 * 百位数字移动到个位。终止条件，除以10后的N最终变成0。
 * 3>统计整数的二进制表示中1的个数，两个方法：N&1，N>>1。&和>>运算。
 * 注意:
 * 更好的归纳、分析的方法，我没掌握，或者说，我没记住。
 ******************************************************************/
#include "Solution.h"

int Solution::NumberOf1Between1AndN(int n) {
    int counter = 0;
    for (int i = 0; i <= n; i++) {
        counter += NumberOf1(i);
    }
    return counter;
}

int Solution::NumberOf1(int n) {
    int counter = 0;
    while (n != 0) {
        if (n % 10 == 1) {
            counter++;
        }
        n = n / 10;
    }
    return counter;
}
